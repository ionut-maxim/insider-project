//go:build go1.22

// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Message defines model for Message.
type Message struct {
	Content   string     `json:"content"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Status    *string    `json:"status,omitempty"`
	To        string     `json:"to"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// WorkerResponse defines model for WorkerResponse.
type WorkerResponse struct {
	Message string `json:"message"`
}

// MessagesSentParams defines parameters for MessagesSent.
type MessagesSentParams struct {
	Limit  int `form:"limit" json:"limit"`
	Offset int `form:"offset" json:"offset"`
}

// MessagesAddJSONRequestBody defines body for MessagesAdd for application/json ContentType.
type MessagesAddJSONRequestBody = Message

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /messages)
	MessagesSent(w http.ResponseWriter, r *http.Request, params MessagesSentParams)

	// (POST /messages)
	MessagesAdd(w http.ResponseWriter, r *http.Request)
	// Starts the polling worker
	// (GET /worker/start)
	WorkerStart(w http.ResponseWriter, r *http.Request)
	// Stops the polling worker
	// (GET /worker/stop)
	WorkerStop(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// MessagesSent operation middleware
func (siw *ServerInterfaceWrapper) MessagesSent(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params MessagesSentParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MessagesSent(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MessagesAdd operation middleware
func (siw *ServerInterfaceWrapper) MessagesAdd(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MessagesAdd(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// WorkerStart operation middleware
func (siw *ServerInterfaceWrapper) WorkerStart(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WorkerStart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// WorkerStop operation middleware
func (siw *ServerInterfaceWrapper) WorkerStop(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WorkerStop(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/messages", wrapper.MessagesSent)
	m.HandleFunc("POST "+options.BaseURL+"/messages", wrapper.MessagesAdd)
	m.HandleFunc("GET "+options.BaseURL+"/worker/start", wrapper.WorkerStart)
	m.HandleFunc("GET "+options.BaseURL+"/worker/stop", wrapper.WorkerStop)

	return m
}

type MessagesSentRequestObject struct {
	Params MessagesSentParams
}

type MessagesSentResponseObject interface {
	VisitMessagesSentResponse(w http.ResponseWriter) error
}

type MessagesSent200JSONResponse []Message

func (response MessagesSent200JSONResponse) VisitMessagesSentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MessagesSentdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response MessagesSentdefaultJSONResponse) VisitMessagesSentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type MessagesAddRequestObject struct {
	Body *MessagesAddJSONRequestBody
}

type MessagesAddResponseObject interface {
	VisitMessagesAddResponse(w http.ResponseWriter) error
}

type MessagesAdd201Response struct {
}

func (response MessagesAdd201Response) VisitMessagesAddResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type MessagesAdddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response MessagesAdddefaultJSONResponse) VisitMessagesAddResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WorkerStartRequestObject struct {
}

type WorkerStartResponseObject interface {
	VisitWorkerStartResponse(w http.ResponseWriter) error
}

type WorkerStart200JSONResponse WorkerResponse

func (response WorkerStart200JSONResponse) VisitWorkerStartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkerStartdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response WorkerStartdefaultJSONResponse) VisitWorkerStartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type WorkerStopRequestObject struct {
}

type WorkerStopResponseObject interface {
	VisitWorkerStopResponse(w http.ResponseWriter) error
}

type WorkerStop200JSONResponse WorkerResponse

func (response WorkerStop200JSONResponse) VisitWorkerStopResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WorkerStopdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response WorkerStopdefaultJSONResponse) VisitWorkerStopResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /messages)
	MessagesSent(ctx context.Context, request MessagesSentRequestObject) (MessagesSentResponseObject, error)

	// (POST /messages)
	MessagesAdd(ctx context.Context, request MessagesAddRequestObject) (MessagesAddResponseObject, error)
	// Starts the polling worker
	// (GET /worker/start)
	WorkerStart(ctx context.Context, request WorkerStartRequestObject) (WorkerStartResponseObject, error)
	// Stops the polling worker
	// (GET /worker/stop)
	WorkerStop(ctx context.Context, request WorkerStopRequestObject) (WorkerStopResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// MessagesSent operation middleware
func (sh *strictHandler) MessagesSent(w http.ResponseWriter, r *http.Request, params MessagesSentParams) {
	var request MessagesSentRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MessagesSent(ctx, request.(MessagesSentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MessagesSent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MessagesSentResponseObject); ok {
		if err := validResponse.VisitMessagesSentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MessagesAdd operation middleware
func (sh *strictHandler) MessagesAdd(w http.ResponseWriter, r *http.Request) {
	var request MessagesAddRequestObject

	var body MessagesAddJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MessagesAdd(ctx, request.(MessagesAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MessagesAdd")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MessagesAddResponseObject); ok {
		if err := validResponse.VisitMessagesAddResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// WorkerStart operation middleware
func (sh *strictHandler) WorkerStart(w http.ResponseWriter, r *http.Request) {
	var request WorkerStartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WorkerStart(ctx, request.(WorkerStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkerStart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WorkerStartResponseObject); ok {
		if err := validResponse.VisitWorkerStartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// WorkerStop operation middleware
func (sh *strictHandler) WorkerStop(w http.ResponseWriter, r *http.Request) {
	var request WorkerStopRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.WorkerStop(ctx, request.(WorkerStopRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WorkerStop")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(WorkerStopResponseObject); ok {
		if err := validResponse.VisitWorkerStopResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
